#!/usr/bin/env python3

import argparse
import os
import sys
from string import Template
from anthropic import Anthropic


def read_file(file_path):
    """Read the content of a file."""
    try:
        with open(file_path, "r") as file:
            return file.read()
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file: {e}")
        sys.exit(1)


def summarize_diff(diff_content, prompt_template_path):
    """Send the diff to Claude 3.7 and get a summary of the changes."""

    # Read the prompt template
    prompt_template = read_file(prompt_template_path)

    # Substitute the diff content into the prompt
    template = Template(prompt_template)
    prompt = template.substitute(diff_content=diff_content)

    # Initialize the Anthropic client
    api_key = os.environ.get("ANTHROPIC_API_KEY")
    if not api_key:
        print("Error: ANTHROPIC_API_KEY environment variable not set.")
        sys.exit(1)

    client = Anthropic(api_key=api_key)

    try:
        # Send the prompt to Claude 3.7
        message = client.messages.create(
            model="claude-3-7-sonnet-latest",
            max_tokens=8192,
            messages=[{"role": "user", "content": prompt}],
        )

        # Return the response
        return message.content[0].text

    except Exception as e:
        print(f"Error calling Claude API: {e}")
        sys.exit(1)
        

def process_diff(diff_content):
    """Process the diff content to keep only additions."""
    diff_lines = diff_content.splitlines()
    additions_only = []
    
    for line in diff_lines:
        if line.startswith("+") and not line.startswith("+++"):
            additions_only.append(line)
            
    print(f"Processed diff to include only additions: {len(additions_only)} lines")
    
    return "\n".join(additions_only)


def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description="Summarize git diff using Claude 3.7")
    parser.add_argument("diff_file", help="Path to the file containing git diff output")
    parser.add_argument(
        "--prompt",
        default="prompt.txt",
        help="Path to the prompt template file (default: prompt.txt)",
    )
    parser.add_argument(
        "--output",
        default="output",
        help="Path to save the summary output (default: print to console)",
    )
    

    # Parse arguments
    args = parser.parse_args()

    # Read the diff file
    diff_content = read_file(args.diff_file)
    
    diff_content_additions_only = process_diff(diff_content)

    # Get the summary from Claude
    summary = summarize_diff(diff_content_additions_only, args.prompt)

    # Output the summary
    if args.output:
        try:
            # Ensure the output directory exists
            output_dir = os.path.dirname(args.output)
            if output_dir and not os.path.exists(output_dir):
                os.makedirs(output_dir, exist_ok=True)
                
            # Write the summary to the output file
            with open(args.output, "w") as f:
                f.write(summary)
            print(f"Summary saved to: {args.output}")
        except Exception as e:
            print(f"Error writing to output file: {e}")
            sys.exit(1)
    else:
        # Print the summary to console
        print(summary)


if __name__ == "__main__":
    main()
